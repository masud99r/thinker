# Format adopted from Procgen competition at NeurIPS 2020
# config:
env: procgen_env_wrapper  # Change this at your own risk :D

################################################
################################################
# === Settings for the Procgen Environment ===
################################################
################################################
env_config:
    # Name of the procgen environment to train on # Note, that this parameter will be overriden during the evaluation by the AIcrowd evaluators.
    # env_name: leaper #leaper #climber #heist #climber #heist # dodgeball #fruitbot #bossfight #coinrun # dodgeball =
    # The number of unique levels that can be generated. Set to 0 to use unlimited levels
    num_levels: 200
    # The lowest seed that will be used to generated levels. 'start_level' and 'num_levels' fully specify the set of possible levels
    start_level: 0
    # Paint player velocity info in the top left corner. Only supported by certain games.
    paint_vel_info: False
    # Use randomly generated assets in place of human designed assets
    use_generated_assets: False
    # center_agent : Determines whether observations are centered on the agent or display the full level. Override at your own risk.
    center_agent: True
    # sequential levels : When you reach the end of a level, the episode is ended and a new level is selected. If use_sequential_levels is set to True, reaching the end of a level does not end the episode, and the seed for the new level is derived from the current level seed. If you combine this with start_level=<some seed> and num_levels=1, you can have a single linear series of levels similar to a gym-retro or ALE game.
    use_sequential_levels: False
    # What variant of the levels to use, the options are "easy", "hard", "extreme", "memory", "exploration". All games support "easy" and "hard", while other options are game-specific. The default is "hard". Switching to "easy" will reduce the number of timesteps required to solve each game and is useful for testing or when working with limited compute resources. NOTE : During the evaluation phase (rollout), this will always be overriden to "easy"
    distribution_mode: easy

# evaluation_interval: 5 #5
# evaluation_num_episodes: 50 # for better evaluation on all distribution of levels

evaluation_interval: 10
evaluation_num_episodes: 128
evaluation_num_workers: 1
# Whether to run evaluation in parallel to a Trainer.train() call
# using threading. Default=False.
# E.g. evaluation_interval=2 -> For every other training iteration,
# the Trainer.train() and Trainer.evaluate() calls run in parallel.
# Note: This is experimental. Possible pitfalls could be race conditions
# for weight synching at the beginning of the evaluation loop.
# evaluation_parallel_to_training: True
# Typical usage is to pass extra args to evaluation env creator
# and to disable exploration by computing deterministic actions.
# IMPORTANT NOTE: Policy gradient algorithms are able to find the optimal
# policy, even if this is a stochastic one. Setting "explore=False" here
# will result in the evaluation workers not using this optimal policy!
evaluation_config:
    env_config:
        # Name of the procgen environment to train on # Note, that this parameter will be overriden during the evaluation by the AIcrowd evaluators.
        # env_name: leaper #leaper #climber #heist #climber #heist #dodgeball #fruitbot #bossfight #coinrun
        # The number of unique levels that can be generated. Set to 0 to use unlimited levels
        num_levels: 0
        # The lowest seed that will be used to generated levels. 'start_level' and 'num_levels' fully specify the set of possible levels
        start_level: 0 # all distribution, to be consistent with the prior work
        # Paint player velocity info in the top left corner. Only supported by certain games.
        paint_vel_info: False
        # Use randomly generated assets in place of human designed assets
        use_generated_assets: False
        # center_agent : Determines whether observations are centered on the agent or display the full level. Override at your own risk.
        center_agent: True
        # sequential levels : When you reach the end of a level, the episode is ended and a new level is selected. If use_sequential_levels is set to True, reaching the end of a level does not end the episode, and the seed for the new level is derived from the current level seed. If you combine this with start_level=<some seed> and num_levels=1, you can have a single linear series of levels similar to a gym-retro or ALE game.
        use_sequential_levels: False
        # What variant of the levels to use, the options are "easy", "hard", "extreme", "memory", "exploration". All games support "easy" and "hard", while other options are game-specific. The default is "hard". Switching to "easy" will reduce the number of timesteps required to solve each game and is useful for testing or when working with limited compute resources. NOTE : During the evaluation phase (rollout), this will always be overriden to "easy"
        distribution_mode: easy
    # IMPORTANT NOTE: Policy gradient algorithms are able to find the optimal
    # policy, even if this is a stochastic one. Setting "explore=False" here
    # will result in the evaluation workers not using this optimal policy! 
    ### Thus making it True 
    explore: True
################################################
################################################
# === Environment Settings ===
################################################
################################################
# Discount factor of the MDP.
gamma: 0.999
# The GAE(lambda) parameter.
lambda: 0.95
# The default learning rate.
lr: 5.0e-4
# Number of SGD iterations in each outer loop (i.e., number of epochs to
# execute per train batch).
num_sgd_iter: 3
# Total SGD batch size across all devices for SGD. This defines the
# minibatch size within each epoch.
sgd_minibatch_size: 2048 #128 #128 #512 #1024 # 2048 # 8 minibatches per epoch
# Training batch size, if applicable. Should be >= rollout_fragment_length.
# Samples batches will be concatenated together to a batch of this size,
# which is then passed to SGD.
train_batch_size: 16384 # 8192 #16384 # 256 * 64
# Initial coefficient for KL divergence.
kl_coeff: 0.0
# Target value for KL divergence.
kl_target: 0.01
# Coefficient of the value function loss. IMPORTANT: you must tune this if
# you set vf_share_layers: True.
vf_loss_coeff: 0.5
# Coefficient of the entropy regularizer.
entropy_coeff: 0.01
# PPO clip parameter.
clip_param: 0.2
# Clip param for the value function. Note that this is sensitive to the
# scale of the rewards. If your expected V is large, increase this.
vf_clip_param: 0.2
# If specified, clip the global norm of gradients by this amount.
grad_clip: 0.5
# Which observation filter to apply to the observation.
observation_filter: NoFilter
# Share layers for value function. If you set this to True, it's important
# to tune vf_loss_coeff.
vf_share_layers: True
# Number of steps after which the episode is forced to terminate. Defaults
# to `env.spec.max_episode_steps` (if present) for Gym envs.
horizon: null
# Calculate rewards but don't reset the environment when the horizon is
# hit. This allows value estimation and RNN state to span across logical
# episodes denoted by horizon. This only has an effect if horizon != inf.
soft_horizon: False
# Don't set 'done' at the end of the episode. Note that you still need to
# set this if soft_horizon=True, unless your env is actually running
# forever without returning done=True.
no_done_at_end: False

# Unsquash actions to the upper and lower bounds of env's action space
normalize_actions: False
# Whether to clip rewards prior to experience postprocessing. Setting to
# None means clip for Atari only.
clip_rewards: null
# Whether to np.clip() actions to the action space low/high range spec.
clip_actions: True
# Whether to use rllib or deepmind preprocessors by default
preprocessor_pref: deepmind

# Whether to attempt to continue training if a worker crashes. The number
# of currently healthy workers is reported as the "num_healthy_workers"
# metric.
ignore_worker_failures: False
# Log system resource metrics to results. This requires `psutil` to be
# installed for sys stats, and `gputil` for GPU metrics.
# Note : The AIcrowd Evaluators will always override this to be True
log_sys_usage: True

# Use PyTorch (instead of tf). If using `rllib train`, this can also be
# enabled with the `--torch` flag.
# NOTE: Some agents may not support `torch` yet and throw an error.
# use_pytorch: True
framework: torch

################################################
################################################
# === Settings for Model ===
################################################
################################################
model:
    custom_model: impala_cnn_torch


################################################
################################################
# === Settings for Rollout Worker processes ===
################################################
################################################
# Number of rollout worker actors to create for parallel sampling. Setting
# this to 0 will force rollouts to be done in the trainer actor.
num_workers: 3 # default = 6, change this before submission

# Number of environments to evaluate vectorwise per worker. This enables
# model inference batching, which can improve performance for inference
# bottlenecked workloads.
num_envs_per_worker: 12 # 3*11*256 = 8448 # it was 2 env before
rollout_fragment_length: 256 #128 # 256

# Whether to rollout "complete_episodes" or "truncate_episodes" to
# `rollout_fragment_length` length unrolls. Episode truncation guarantees
# evenly sized batches, but increases variance as the reward-to-go will
# need to be estimated at truncation boundaries.
batch_mode: truncate_episodes

################################################
################################################
# === Advanced Resource Settings ===
################################################
################################################
# Number of CPUs to allocate per worker.
num_cpus_per_worker: 2 #1
# Number of GPUs to allocate per worker. This can be fractional. This is
# usually needed only if your env itself requires a GPU (i.e., it is a
# GPU-intensive video game), or model inference is unusually expensive.
num_gpus_per_worker: 0.01 #0.01 # default=0.1, change this before submission
# Number of CPUs to allocate for the trainer. Note: this only takes effect
# when running in Tune. Otherwise, the trainer runs in the main program.
num_cpus_for_driver: 2 #1

################################################
################################################
# === Settings for the Trainer process ===
################################################
################################################
# Number of GPUs to allocate to the trainer process. Note that not all
# algorithms can take advantage of trainer GPUs. This can be fractional
# (e.g., 0.3 GPUs).
num_gpus: 0.3 # 0.3 # 0.3

################################################
################################################
# === Exploration Settings ===
################################################
################################################
# Default exploration behavior, iff `explore`=None is passed into
# compute_action(s).
# Set to False for no exploration behavior (e.g., for evaluation).
explore: True,
# Provide a dict specifying the Exploration object's config.
exploration_config:
    # The Exploration class to use. In the simplest case, this is the name
    # (str) of any class present in the `rllib.utils.exploration` package.
    # You can also provide the python class directly or the full location
    # of your class (e.g. "ray.rllib.utils.exploration.epsilon_greedy.
    # EpsilonGreedy)
    type: "StochasticSampling"
    # Can add constructor kwargs here (if any)

################################################
################################################
# === Advanced Rollout Settings ===
################################################
################################################
# Element-wise observation filter, either "NoFilter" or "MeanStdFilter".
observation_filter: "NoFilter"
# Whether to synchronize the statistics of remote filters.
synchronize_filters: True
# Whether to LZ4 compress individual observations
compress_observations: False
# Minimum env steps to optimize for per train call. This value does
# not affect learning, only the length of train iterations.
timesteps_per_iteration: 0
# This argument, in conjunction with worker_index, sets the random seed of
# each worker, so that identically configured trials will have identical
# results. This makes experiments reproducible.
# seed: 100 #100, 200, 400


